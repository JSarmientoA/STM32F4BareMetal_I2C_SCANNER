
P25_I2C_SCANNER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800179c  0800179c  0001179c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800189c  0800189c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800189c  0800189c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800189c  0800189c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080018a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001908  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001908  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000147e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000622  00000000  00000000  00021512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa32  00000000  00000000  00021e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000219a  00000000  00000000  0003c862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906d6  00000000  00000000  0003e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  000cf124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001784 	.word	0x08001784

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001784 	.word	0x08001784

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <I2c_int>:
/*Pinout
 * PB8 ---> SCL--> D15
 * PB9 ---> SDA--> D14
 * */

void I2c_int(void){
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Habilitar el reloj para el I2C*/
	RCC->APB1ENR |= (1U<<21);
 80002b4:	4b59      	ldr	r3, [pc, #356]	; (800041c <I2c_int+0x16c>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b8:	4a58      	ldr	r2, [pc, #352]	; (800041c <I2c_int+0x16c>)
 80002ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002be:	6413      	str	r3, [r2, #64]	; 0x40

	/*Habilitar el reloj para el GPIOB*/
	RCC->AHB1ENR|= (1U<<1);
 80002c0:	4b56      	ldr	r3, [pc, #344]	; (800041c <I2c_int+0x16c>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a55      	ldr	r2, [pc, #340]	; (800041c <I2c_int+0x16c>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30

	/*Estableser PB8 y PB9 como funcion alternativa*/
	GPIOB->MODER &=~ (1U<<16);
 80002cc:	4b54      	ldr	r3, [pc, #336]	; (8000420 <I2c_int+0x170>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a53      	ldr	r2, [pc, #332]	; (8000420 <I2c_int+0x170>)
 80002d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U<<17);
 80002d8:	4b51      	ldr	r3, [pc, #324]	; (8000420 <I2c_int+0x170>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a50      	ldr	r2, [pc, #320]	; (8000420 <I2c_int+0x170>)
 80002de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~ (1U<<18);
 80002e4:	4b4e      	ldr	r3, [pc, #312]	; (8000420 <I2c_int+0x170>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a4d      	ldr	r2, [pc, #308]	; (8000420 <I2c_int+0x170>)
 80002ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U<<19);
 80002f0:	4b4b      	ldr	r3, [pc, #300]	; (8000420 <I2c_int+0x170>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a4a      	ldr	r2, [pc, #296]	; (8000420 <I2c_int+0x170>)
 80002f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002fa:	6013      	str	r3, [r2, #0]

	/*Estableser PB8 y PB9 en open drain*/
	GPIOB->OTYPER |= (1U<<8);
 80002fc:	4b48      	ldr	r3, [pc, #288]	; (8000420 <I2c_int+0x170>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a47      	ldr	r2, [pc, #284]	; (8000420 <I2c_int+0x170>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8000308:	4b45      	ldr	r3, [pc, #276]	; (8000420 <I2c_int+0x170>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a44      	ldr	r2, [pc, #272]	; (8000420 <I2c_int+0x170>)
 800030e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000312:	6053      	str	r3, [r2, #4]

	/*Configuracion de PB9 y PB8 en alta valocidad*/
	GPIOB->OSPEEDR |= (1U<<16);
 8000314:	4b42      	ldr	r3, [pc, #264]	; (8000420 <I2c_int+0x170>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a41      	ldr	r2, [pc, #260]	; (8000420 <I2c_int+0x170>)
 800031a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800031e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1U<<17);
 8000320:	4b3f      	ldr	r3, [pc, #252]	; (8000420 <I2c_int+0x170>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a3e      	ldr	r2, [pc, #248]	; (8000420 <I2c_int+0x170>)
 8000326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800032a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1U<<18);
 800032c:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <I2c_int+0x170>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4a3b      	ldr	r2, [pc, #236]	; (8000420 <I2c_int+0x170>)
 8000332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000336:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (1U<<19);
 8000338:	4b39      	ldr	r3, [pc, #228]	; (8000420 <I2c_int+0x170>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a38      	ldr	r2, [pc, #224]	; (8000420 <I2c_int+0x170>)
 800033e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000342:	6093      	str	r3, [r2, #8]

	/*Habilite las resistencias Pull up  para PB9 y PB8*/
	GPIOB->PUPDR |=  (1U<<16);
 8000344:	4b36      	ldr	r3, [pc, #216]	; (8000420 <I2c_int+0x170>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a35      	ldr	r2, [pc, #212]	; (8000420 <I2c_int+0x170>)
 800034a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~ (1U<<17);
 8000350:	4b33      	ldr	r3, [pc, #204]	; (8000420 <I2c_int+0x170>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a32      	ldr	r2, [pc, #200]	; (8000420 <I2c_int+0x170>)
 8000356:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800035a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (1U<<18);
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <I2c_int+0x170>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a2f      	ldr	r2, [pc, #188]	; (8000420 <I2c_int+0x170>)
 8000362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000366:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~ (1U<<19);
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <I2c_int+0x170>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a2c      	ldr	r2, [pc, #176]	; (8000420 <I2c_int+0x170>)
 800036e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000372:	60d3      	str	r3, [r2, #12]

	/*establecer como función alternativa PB8 y PB9*/
	//PB8
	GPIOB->AFR[1] &=~ (1U<<0);
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <I2c_int+0x170>)
 8000376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000378:	4a29      	ldr	r2, [pc, #164]	; (8000420 <I2c_int+0x170>)
 800037a:	f023 0301 	bic.w	r3, r3, #1
 800037e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~ (1U<<1);
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <I2c_int+0x170>)
 8000382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000384:	4a26      	ldr	r2, [pc, #152]	; (8000420 <I2c_int+0x170>)
 8000386:	f023 0302 	bic.w	r3, r3, #2
 800038a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=  (1U<<2);
 800038c:	4b24      	ldr	r3, [pc, #144]	; (8000420 <I2c_int+0x170>)
 800038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <I2c_int+0x170>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~ (1U<<3);
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <I2c_int+0x170>)
 800039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039c:	4a20      	ldr	r2, [pc, #128]	; (8000420 <I2c_int+0x170>)
 800039e:	f023 0308 	bic.w	r3, r3, #8
 80003a2:	6253      	str	r3, [r2, #36]	; 0x24
	//PB9
	GPIOB->AFR[1] &=~ (1U<<4);
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <I2c_int+0x170>)
 80003a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a8:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <I2c_int+0x170>)
 80003aa:	f023 0310 	bic.w	r3, r3, #16
 80003ae:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~ (1U<<5);
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <I2c_int+0x170>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <I2c_int+0x170>)
 80003b6:	f023 0320 	bic.w	r3, r3, #32
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=  (1U<<6);
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <I2c_int+0x170>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4a17      	ldr	r2, [pc, #92]	; (8000420 <I2c_int+0x170>)
 80003c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &=~ (1U<<7);
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <I2c_int+0x170>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <I2c_int+0x170>)
 80003ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003d2:	6253      	str	r3, [r2, #36]	; 0x24

	/*I2C en estado de reset*/
	I2C1->CR1 |= (1U<<15);
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <I2c_int+0x174>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <I2c_int+0x174>)
 80003da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003de:	6013      	str	r3, [r2, #0]

	/*Salida del reinicio I2C*/
	I2C1->CR1 &= ~(1U<<15);
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <I2c_int+0x174>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <I2c_int+0x174>)
 80003e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003ea:	6013      	str	r3, [r2, #0]
	 * cumplan con las especificaciones I2C. La frecuencia mínima permitida
	 * es de 2 MHz, la frecuencia máxima está limitada por la frecuencia máxima
	 * APB (45 MHz) y no puede exceder los 50 MHz (límite máximo intrínseco del
	 * periférico).
	 * */
	I2C1->CR2 |= (1U<<4);// 16MHZ por defecto todo se sta trabajabdo a 16 MHZ
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <I2c_int+0x174>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <I2c_int+0x174>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6053      	str	r3, [r2, #4]
	*/

	//Segun la hoja de datos tw(SCLH) = 4.0 μs y tr(SCL) = 1000 μs. Tabla 61

	/*Setear el I2C en modo estandar, esto es la configuracion del reloj*/
	I2C1->CCR = 80<<0;
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <I2c_int+0x174>)
 80003fa:	2250      	movs	r2, #80	; 0x50
 80003fc:	61da      	str	r2, [r3, #28]
	         tr(SCL)           1000ns
	TRISE = ---------- + 1 = ---------- + 1 = 17
	         TPCLK1            62.5ns
	*/

	I2C1->TRISE = 17;//Esto es 17
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <I2c_int+0x174>)
 8000400:	2211      	movs	r2, #17
 8000402:	621a      	str	r2, [r3, #32]

	/*Habiltar el I2C*/
	I2C1->CR1 |= (1U<<0);
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <I2c_int+0x174>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <I2c_int+0x174>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40023800 	.word	0x40023800
 8000420:	40020400 	.word	0x40020400
 8000424:	40005400 	.word	0x40005400

08000428 <I2c_Start>:

void I2c_Start(void){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	/*Abilita el reconocomiento (Acknowledge)*/
	I2C1->CR1 |= (1U<<10);
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <I2c_Start+0x38>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <I2c_Start+0x38>)
 8000432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000436:	6013      	str	r3, [r2, #0]

	/*Generando una condicion de imicio para el I2C*/
	I2C1->CR1 |= (1U<<8);
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <I2c_Start+0x38>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a08      	ldr	r2, [pc, #32]	; (8000460 <I2c_Start+0x38>)
 800043e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000442:	6013      	str	r3, [r2, #0]

	/*Esperar a que se establezca la bandera SB*/
	/*si el bit de inicio no está sentado,
	 *nos quedaremos atascados aquí, cuando se establezca SR1_SB, saldrá de este bucle aquí.*/
	while(!(I2C1->SR1 & (1U<<0)));
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <I2c_Start+0x38>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <I2c_Start+0x1e>
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40005400 	.word	0x40005400

08000464 <I2c_Stop>:

	/*Lea los registros SR1 y SR2*/
	uint8_t tmp = I2C1->SR1 | I2C1->SR2;
}

void I2c_Stop(void){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1U<<9);
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <I2c_Stop+0x1c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <I2c_Stop+0x1c>)
 800046e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40005400 	.word	0x40005400

08000484 <main>:
#include "systick.h"
#include "I2c.h"
#include "uart.h"
/*Este prgrama esanea un dispositivo i2c para encontrar su direccion*/
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
	/**Iniciliza la comunicacion uart*/
	uart2_rx_tx_init();
 800048a:	f000 f8e3 	bl	8000654 <uart2_rx_tx_init>
	/**Iniciliza la comunicacion i2c*/
	I2c_int();
 800048e:	f7ff ff0f 	bl	80002b0 <I2c_int>
	int vandera = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]

	printf("Escaneando Dispositivos ...\n\r");
 8000496:	4819      	ldr	r0, [pc, #100]	; (80004fc <main+0x78>)
 8000498:	f000 f9e6 	bl	8000868 <iprintf>
	for(int Address = 0;Address<128;Address++){
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	e021      	b.n	80004e6 <main+0x62>
		/*Condicion de star para el i2c*/
		I2c_Start();
 80004a2:	f7ff ffc1 	bl	8000428 <I2c_Start>
		/*Envíe la direccion al registro de datos*/
		I2C1->DR = Address;
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <main+0x7c>)
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	6113      	str	r3, [r2, #16]
		/*Valida si la dirección enviada coincide con la del dispositivo*/
		//printf("Ultimo valor de Address 0x%X\n\r",Address);
		if((I2C1->SR1 & (1U<<1))){
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <main+0x7c>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f003 0302 	and.w	r3, r3, #2
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d011      	beq.n	80004dc <main+0x58>
			printf("Dispositivo Encontrado 0x%X\n\r",(Address<<0)-1);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	4811      	ldr	r0, [pc, #68]	; (8000504 <main+0x80>)
 80004c0:	f000 f9d2 	bl	8000868 <iprintf>
			Address=129;
 80004c4:	2381      	movs	r3, #129	; 0x81
 80004c6:	60bb      	str	r3, [r7, #8]
			vandera = 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
			/*Lea los registros SR1 y SR2*/
			uint8_t tmp = I2C1->SR1 | I2C1->SR2;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <main+0x7c>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <main+0x7c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4313      	orrs	r3, r2
 80004da:	71fb      	strb	r3, [r7, #7]
		}
		/*Condicion de parada para el i2c*/
		I2c_Stop();
 80004dc:	f7ff ffc2 	bl	8000464 <I2c_Stop>
	for(int Address = 0;Address<128;Address++){
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2b7f      	cmp	r3, #127	; 0x7f
 80004ea:	ddda      	ble.n	80004a2 <main+0x1e>
	}

	if(vandera==0){
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <main+0x74>
		printf("No se encontraron dispositivos ...\n\r");
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x84>)
 80004f4:	f000 f9b8 	bl	8000868 <iprintf>
	}

	while (1){
 80004f8:	e7fe      	b.n	80004f8 <main+0x74>
 80004fa:	bf00      	nop
 80004fc:	0800179c 	.word	0x0800179c
 8000500:	40005400 	.word	0x40005400
 8000504:	080017bc 	.word	0x080017bc
 8000508:	080017dc 	.word	0x080017dc

0800050c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00a      	b.n	8000534 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051e:	f3af 8000 	nop.w
 8000522:	4601      	mov	r1, r0
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	b2ca      	uxtb	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf0      	blt.n	800051e <_read+0x12>
  }

  return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b086      	sub	sp, #24
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f8db 	bl	800071c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x12>
  }
  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_close>:

int _close(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a6:	605a      	str	r2, [r3, #4]
  return 0;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_isatty>:

int _isatty(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f000 f8f4 	bl	8000804 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20020000 	.word	0x20020000
 8000648:	00000400 	.word	0x00000400
 800064c:	20000080 	.word	0x20000080
 8000650:	20000098 	.word	0x20000098

08000654 <uart2_rx_tx_init>:
void uart2_write(int ch);
int __io_putchar(int ch);


void uart2_rx_tx_init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/***************Configurción del puerto UART**************/
	/*Active el acceso al reloj para los pines del uart (gpioa)*/
	RCC->AHB1ENR |= GPIOAEN;
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <uart2_rx_tx_init+0xb8>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <uart2_rx_tx_init+0xb8>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
	/*Congigure el pin correpondiente (en este caso solo trnasmisión y es el pin PA2) en modo alternativo*/
	GPIOA->MODER &=~ (1U<<4);//Bit 4 del registro MODER en el periferico GPIOA en 0. &=~ es invertir
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <uart2_rx_tx_init+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <uart2_rx_tx_init+0xbc>)
 800066a:	f023 0310 	bic.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);//Bit 5 del registro MODER en el periferico GPIOA en 1.
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <uart2_rx_tx_init+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <uart2_rx_tx_init+0xbc>)
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	6013      	str	r3, [r2, #0]
	/*Configuración del pin PA3 en cmodo alternativo*/
	GPIOA->MODER &= ~(1U<<6);
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <uart2_rx_tx_init+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <uart2_rx_tx_init+0xbc>)
 8000682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000686:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<7);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <uart2_rx_tx_init+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <uart2_rx_tx_init+0xbc>)
 800068e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000692:	6013      	str	r3, [r2, #0]
	/*Congigure el pin correpondiente (en este caso solo trnasmisión y es el pin PA2) en el tipo de modo alternativo
	  en este caso como uart (AF07)*/
	//GPIOA->AFR[0] |=  (1U<<8);
	//GPIOA->AFR[0] |=  (1U<<9);
	//GPIOA->AFR[0] |=  (1U<<10);
	GPIOA->AFR[0] |=  (1U<<8|1U<<9|1U<<10);
 8000694:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <uart2_rx_tx_init+0xbc>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <uart2_rx_tx_init+0xbc>)
 800069a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800069e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006aa:	6213      	str	r3, [r2, #32]
	/*Congigure el pin correpondiente (en este caso solo trnasmisión y es el pin PA3) en el tipo de modo alternativo
		  en este caso como uart (AF07)*/
	GPIOA->AFR[0] |=  (1U<<14|1U<<13|1U<<12);
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80006b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <uart2_rx_tx_init+0xbc>)
 80006be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006c2:	6213      	str	r3, [r2, #32]
	 de datos esta configurado como un vector de dos posiciones con L=0 y H=1. El vaor del refistro AFR[L H]
	 se optiene de la Table 11. Alternate function pag 57 hoja tecnica*/

	/***************Configurción del modulo UART**************/
	/*Habilitar el acceso al reloj de uart*/
	RCC->APB1ENR |= UART2EN;/* En el periferico RCC se accede al registro APB1ENR y se cmodifica el
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <uart2_rx_tx_init+0xb8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <uart2_rx_tx_init+0xb8>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
	registro operandolo con UARTEN = (1U<<17)*/

	/*Confugurar la velocidad en baudios (baudrate) del uart*/
	uart_set_bautrate(USART2, APB1_CLK, BAUDRATE);
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	490f      	ldr	r1, [pc, #60]	; (8000714 <uart2_rx_tx_init+0xc0>)
 80006d6:	4810      	ldr	r0, [pc, #64]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006d8:	f000 f844 	bl	8000764 <uart_set_bautrate>


	/* Habilita la reseccion por el DMA */
	USART2->CR3 |= DMAR;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	6153      	str	r3, [r2, #20]

	/* Habilita la transmision por el DMA */
	USART2->CR3 |= DMAT;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	6153      	str	r3, [r2, #20]

	/*Configurar la dirección de trnasferencia para este caso trnasmision y recepción de datos*/
	USART2->CR1 = (CR1_TE | CR1_RE);/* trnasmision y recepción de datos. No se uso el oprador |= (OR) por que se aprobecho para limpiar
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	60da      	str	r2, [r3, #12]
	todala uart por lo que la operacion (1U<<3) al colocar el bit 3 en 1 el resto
	los pone en cero por lo  que es la confihuracion predeterminada de la uart*/

	/*Habilitar el modulo uart*/
	USART2->CR1 |= CR1_UE;/*Cuando se borra este bit, los preescaladores y salidas USART se detienen y finaliza
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <uart2_rx_tx_init+0xc4>)
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <uart2_rx_tx_init+0xc4>)
 8000700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000704:	60d3      	str	r3, [r2, #12]
	la transferencia de bytes actual para reducir el consumo de energía. Este bit se establece y borra por software.
	UE = 0: Prescaler USART y salidas deshabilitadas
	UE = 1: USART habilitado */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000
 8000714:	00f42400 	.word	0x00f42400
 8000718:	40004400 	.word	0x40004400

0800071c <__io_putchar>:


int __io_putchar(int ch)//__io_
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f805 	bl	8000734 <uart2_write>
	return ch;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <uart2_write>:
/*Funcion para escribir en la uart*/
void uart2_write(int ch)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/*Validar que el bit del registro de datos este vacio antes de trnasmitir*/
	while(!(USART2->SR & SR_TXE)){}// Esta operación devuelve 1 si el bit TXE esta establecido
 800073c:	bf00      	nop
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <uart2_write+0x2c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <uart2_write+0xa>
	se borra mediante una escritura en el registro USART_DR.
	0: Los datos no se transfieren al registro de desplazamiento
	1: Los datos se transfieren al registro de desplazamiento)
	Nota: Este bit se utiliza durante la transmisión de un solo búfer.*/
	/*Escribir para trnasmitir en el registro de datos*/
	USART2->DR =(ch & 0xFF);/*Envia buffer*/
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <uart2_write+0x2c>)
 800074e:	b2db      	uxtb	r3, r3
 8000750:	6053      	str	r3, [r2, #4]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40004400 	.word	0x40004400

08000764 <uart_set_bautrate>:
	/*Se retorna el dato leido*/
	return USART2->DR;
}

static void uart_set_bautrate(USART_TypeDef *USARTx, uint32_t clkPerife, uint32_t BaudRate)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(clkPerife, BaudRate);
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f000 f808 	bl	8000788 <compute_uart_bd>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	609a      	str	r2, [r3, #8]
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t clkPerife, uint32_t BaudRate)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	return((clkPerife + (BaudRate/2U))/BaudRate);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	085a      	lsrs	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	441a      	add	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
	/*El valor que devuelve esta función se escribira en el
	 registro de velovidad de baudios BuadRate de la UART*/
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 f817 	bl	8000810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fe4f 	bl	8000484 <main>

080007e6 <LoopForever>:

LoopForever:
  b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007f4:	080018a4 	.word	0x080018a4
  ldr r2, =_sbss
 80007f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007fc:	20000094 	.word	0x20000094

08000800 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <__errno>:
 8000804:	4b01      	ldr	r3, [pc, #4]	; (800080c <__errno+0x8>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000

08000810 <__libc_init_array>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	4d0d      	ldr	r5, [pc, #52]	; (8000848 <__libc_init_array+0x38>)
 8000814:	4c0d      	ldr	r4, [pc, #52]	; (800084c <__libc_init_array+0x3c>)
 8000816:	1b64      	subs	r4, r4, r5
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	2600      	movs	r6, #0
 800081c:	42a6      	cmp	r6, r4
 800081e:	d109      	bne.n	8000834 <__libc_init_array+0x24>
 8000820:	4d0b      	ldr	r5, [pc, #44]	; (8000850 <__libc_init_array+0x40>)
 8000822:	4c0c      	ldr	r4, [pc, #48]	; (8000854 <__libc_init_array+0x44>)
 8000824:	f000 ffae 	bl	8001784 <_init>
 8000828:	1b64      	subs	r4, r4, r5
 800082a:	10a4      	asrs	r4, r4, #2
 800082c:	2600      	movs	r6, #0
 800082e:	42a6      	cmp	r6, r4
 8000830:	d105      	bne.n	800083e <__libc_init_array+0x2e>
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f855 3b04 	ldr.w	r3, [r5], #4
 8000838:	4798      	blx	r3
 800083a:	3601      	adds	r6, #1
 800083c:	e7ee      	b.n	800081c <__libc_init_array+0xc>
 800083e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000842:	4798      	blx	r3
 8000844:	3601      	adds	r6, #1
 8000846:	e7f2      	b.n	800082e <__libc_init_array+0x1e>
 8000848:	0800189c 	.word	0x0800189c
 800084c:	0800189c 	.word	0x0800189c
 8000850:	0800189c 	.word	0x0800189c
 8000854:	080018a0 	.word	0x080018a0

08000858 <memset>:
 8000858:	4402      	add	r2, r0
 800085a:	4603      	mov	r3, r0
 800085c:	4293      	cmp	r3, r2
 800085e:	d100      	bne.n	8000862 <memset+0xa>
 8000860:	4770      	bx	lr
 8000862:	f803 1b01 	strb.w	r1, [r3], #1
 8000866:	e7f9      	b.n	800085c <memset+0x4>

08000868 <iprintf>:
 8000868:	b40f      	push	{r0, r1, r2, r3}
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <iprintf+0x2c>)
 800086c:	b513      	push	{r0, r1, r4, lr}
 800086e:	681c      	ldr	r4, [r3, #0]
 8000870:	b124      	cbz	r4, 800087c <iprintf+0x14>
 8000872:	69a3      	ldr	r3, [r4, #24]
 8000874:	b913      	cbnz	r3, 800087c <iprintf+0x14>
 8000876:	4620      	mov	r0, r4
 8000878:	f000 f866 	bl	8000948 <__sinit>
 800087c:	ab05      	add	r3, sp, #20
 800087e:	9a04      	ldr	r2, [sp, #16]
 8000880:	68a1      	ldr	r1, [r4, #8]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	4620      	mov	r0, r4
 8000886:	f000 f9bd 	bl	8000c04 <_vfiprintf_r>
 800088a:	b002      	add	sp, #8
 800088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000890:	b004      	add	sp, #16
 8000892:	4770      	bx	lr
 8000894:	20000000 	.word	0x20000000

08000898 <std>:
 8000898:	2300      	movs	r3, #0
 800089a:	b510      	push	{r4, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	e9c0 3300 	strd	r3, r3, [r0]
 80008a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008a6:	6083      	str	r3, [r0, #8]
 80008a8:	8181      	strh	r1, [r0, #12]
 80008aa:	6643      	str	r3, [r0, #100]	; 0x64
 80008ac:	81c2      	strh	r2, [r0, #14]
 80008ae:	6183      	str	r3, [r0, #24]
 80008b0:	4619      	mov	r1, r3
 80008b2:	2208      	movs	r2, #8
 80008b4:	305c      	adds	r0, #92	; 0x5c
 80008b6:	f7ff ffcf 	bl	8000858 <memset>
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <std+0x38>)
 80008bc:	6263      	str	r3, [r4, #36]	; 0x24
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <std+0x3c>)
 80008c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <std+0x40>)
 80008c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <std+0x44>)
 80008c8:	6224      	str	r4, [r4, #32]
 80008ca:	6323      	str	r3, [r4, #48]	; 0x30
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	bf00      	nop
 80008d0:	080011ad 	.word	0x080011ad
 80008d4:	080011cf 	.word	0x080011cf
 80008d8:	08001207 	.word	0x08001207
 80008dc:	0800122b 	.word	0x0800122b

080008e0 <_cleanup_r>:
 80008e0:	4901      	ldr	r1, [pc, #4]	; (80008e8 <_cleanup_r+0x8>)
 80008e2:	f000 b8af 	b.w	8000a44 <_fwalk_reent>
 80008e6:	bf00      	nop
 80008e8:	08001505 	.word	0x08001505

080008ec <__sfmoreglue>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	2268      	movs	r2, #104	; 0x68
 80008f0:	1e4d      	subs	r5, r1, #1
 80008f2:	4355      	muls	r5, r2
 80008f4:	460e      	mov	r6, r1
 80008f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008fa:	f000 f8e5 	bl	8000ac8 <_malloc_r>
 80008fe:	4604      	mov	r4, r0
 8000900:	b140      	cbz	r0, 8000914 <__sfmoreglue+0x28>
 8000902:	2100      	movs	r1, #0
 8000904:	e9c0 1600 	strd	r1, r6, [r0]
 8000908:	300c      	adds	r0, #12
 800090a:	60a0      	str	r0, [r4, #8]
 800090c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000910:	f7ff ffa2 	bl	8000858 <memset>
 8000914:	4620      	mov	r0, r4
 8000916:	bd70      	pop	{r4, r5, r6, pc}

08000918 <__sfp_lock_acquire>:
 8000918:	4801      	ldr	r0, [pc, #4]	; (8000920 <__sfp_lock_acquire+0x8>)
 800091a:	f000 b8b3 	b.w	8000a84 <__retarget_lock_acquire_recursive>
 800091e:	bf00      	nop
 8000920:	20000085 	.word	0x20000085

08000924 <__sfp_lock_release>:
 8000924:	4801      	ldr	r0, [pc, #4]	; (800092c <__sfp_lock_release+0x8>)
 8000926:	f000 b8ae 	b.w	8000a86 <__retarget_lock_release_recursive>
 800092a:	bf00      	nop
 800092c:	20000085 	.word	0x20000085

08000930 <__sinit_lock_acquire>:
 8000930:	4801      	ldr	r0, [pc, #4]	; (8000938 <__sinit_lock_acquire+0x8>)
 8000932:	f000 b8a7 	b.w	8000a84 <__retarget_lock_acquire_recursive>
 8000936:	bf00      	nop
 8000938:	20000086 	.word	0x20000086

0800093c <__sinit_lock_release>:
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <__sinit_lock_release+0x8>)
 800093e:	f000 b8a2 	b.w	8000a86 <__retarget_lock_release_recursive>
 8000942:	bf00      	nop
 8000944:	20000086 	.word	0x20000086

08000948 <__sinit>:
 8000948:	b510      	push	{r4, lr}
 800094a:	4604      	mov	r4, r0
 800094c:	f7ff fff0 	bl	8000930 <__sinit_lock_acquire>
 8000950:	69a3      	ldr	r3, [r4, #24]
 8000952:	b11b      	cbz	r3, 800095c <__sinit+0x14>
 8000954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000958:	f7ff bff0 	b.w	800093c <__sinit_lock_release>
 800095c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000960:	6523      	str	r3, [r4, #80]	; 0x50
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <__sinit+0x68>)
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <__sinit+0x6c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	62a2      	str	r2, [r4, #40]	; 0x28
 800096a:	42a3      	cmp	r3, r4
 800096c:	bf04      	itt	eq
 800096e:	2301      	moveq	r3, #1
 8000970:	61a3      	streq	r3, [r4, #24]
 8000972:	4620      	mov	r0, r4
 8000974:	f000 f820 	bl	80009b8 <__sfp>
 8000978:	6060      	str	r0, [r4, #4]
 800097a:	4620      	mov	r0, r4
 800097c:	f000 f81c 	bl	80009b8 <__sfp>
 8000980:	60a0      	str	r0, [r4, #8]
 8000982:	4620      	mov	r0, r4
 8000984:	f000 f818 	bl	80009b8 <__sfp>
 8000988:	2200      	movs	r2, #0
 800098a:	60e0      	str	r0, [r4, #12]
 800098c:	2104      	movs	r1, #4
 800098e:	6860      	ldr	r0, [r4, #4]
 8000990:	f7ff ff82 	bl	8000898 <std>
 8000994:	68a0      	ldr	r0, [r4, #8]
 8000996:	2201      	movs	r2, #1
 8000998:	2109      	movs	r1, #9
 800099a:	f7ff ff7d 	bl	8000898 <std>
 800099e:	68e0      	ldr	r0, [r4, #12]
 80009a0:	2202      	movs	r2, #2
 80009a2:	2112      	movs	r1, #18
 80009a4:	f7ff ff78 	bl	8000898 <std>
 80009a8:	2301      	movs	r3, #1
 80009aa:	61a3      	str	r3, [r4, #24]
 80009ac:	e7d2      	b.n	8000954 <__sinit+0xc>
 80009ae:	bf00      	nop
 80009b0:	08001804 	.word	0x08001804
 80009b4:	080008e1 	.word	0x080008e1

080009b8 <__sfp>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	4607      	mov	r7, r0
 80009bc:	f7ff ffac 	bl	8000918 <__sfp_lock_acquire>
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <__sfp+0x84>)
 80009c2:	681e      	ldr	r6, [r3, #0]
 80009c4:	69b3      	ldr	r3, [r6, #24]
 80009c6:	b913      	cbnz	r3, 80009ce <__sfp+0x16>
 80009c8:	4630      	mov	r0, r6
 80009ca:	f7ff ffbd 	bl	8000948 <__sinit>
 80009ce:	3648      	adds	r6, #72	; 0x48
 80009d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	d503      	bpl.n	80009e0 <__sfp+0x28>
 80009d8:	6833      	ldr	r3, [r6, #0]
 80009da:	b30b      	cbz	r3, 8000a20 <__sfp+0x68>
 80009dc:	6836      	ldr	r6, [r6, #0]
 80009de:	e7f7      	b.n	80009d0 <__sfp+0x18>
 80009e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009e4:	b9d5      	cbnz	r5, 8000a1c <__sfp+0x64>
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <__sfp+0x88>)
 80009e8:	60e3      	str	r3, [r4, #12]
 80009ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009ee:	6665      	str	r5, [r4, #100]	; 0x64
 80009f0:	f000 f847 	bl	8000a82 <__retarget_lock_init_recursive>
 80009f4:	f7ff ff96 	bl	8000924 <__sfp_lock_release>
 80009f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a00:	6025      	str	r5, [r4, #0]
 8000a02:	61a5      	str	r5, [r4, #24]
 8000a04:	2208      	movs	r2, #8
 8000a06:	4629      	mov	r1, r5
 8000a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a0c:	f7ff ff24 	bl	8000858 <memset>
 8000a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a18:	4620      	mov	r0, r4
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	3468      	adds	r4, #104	; 0x68
 8000a1e:	e7d9      	b.n	80009d4 <__sfp+0x1c>
 8000a20:	2104      	movs	r1, #4
 8000a22:	4638      	mov	r0, r7
 8000a24:	f7ff ff62 	bl	80008ec <__sfmoreglue>
 8000a28:	4604      	mov	r4, r0
 8000a2a:	6030      	str	r0, [r6, #0]
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d1d5      	bne.n	80009dc <__sfp+0x24>
 8000a30:	f7ff ff78 	bl	8000924 <__sfp_lock_release>
 8000a34:	230c      	movs	r3, #12
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	e7ee      	b.n	8000a18 <__sfp+0x60>
 8000a3a:	bf00      	nop
 8000a3c:	08001804 	.word	0x08001804
 8000a40:	ffff0001 	.word	0xffff0001

08000a44 <_fwalk_reent>:
 8000a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a48:	4606      	mov	r6, r0
 8000a4a:	4688      	mov	r8, r1
 8000a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a50:	2700      	movs	r7, #0
 8000a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a56:	f1b9 0901 	subs.w	r9, r9, #1
 8000a5a:	d505      	bpl.n	8000a68 <_fwalk_reent+0x24>
 8000a5c:	6824      	ldr	r4, [r4, #0]
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d1f7      	bne.n	8000a52 <_fwalk_reent+0xe>
 8000a62:	4638      	mov	r0, r7
 8000a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a68:	89ab      	ldrh	r3, [r5, #12]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d907      	bls.n	8000a7e <_fwalk_reent+0x3a>
 8000a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a72:	3301      	adds	r3, #1
 8000a74:	d003      	beq.n	8000a7e <_fwalk_reent+0x3a>
 8000a76:	4629      	mov	r1, r5
 8000a78:	4630      	mov	r0, r6
 8000a7a:	47c0      	blx	r8
 8000a7c:	4307      	orrs	r7, r0
 8000a7e:	3568      	adds	r5, #104	; 0x68
 8000a80:	e7e9      	b.n	8000a56 <_fwalk_reent+0x12>

08000a82 <__retarget_lock_init_recursive>:
 8000a82:	4770      	bx	lr

08000a84 <__retarget_lock_acquire_recursive>:
 8000a84:	4770      	bx	lr

08000a86 <__retarget_lock_release_recursive>:
 8000a86:	4770      	bx	lr

08000a88 <sbrk_aligned>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4e0e      	ldr	r6, [pc, #56]	; (8000ac4 <sbrk_aligned+0x3c>)
 8000a8c:	460c      	mov	r4, r1
 8000a8e:	6831      	ldr	r1, [r6, #0]
 8000a90:	4605      	mov	r5, r0
 8000a92:	b911      	cbnz	r1, 8000a9a <sbrk_aligned+0x12>
 8000a94:	f000 fb7a 	bl	800118c <_sbrk_r>
 8000a98:	6030      	str	r0, [r6, #0]
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f000 fb75 	bl	800118c <_sbrk_r>
 8000aa2:	1c43      	adds	r3, r0, #1
 8000aa4:	d00a      	beq.n	8000abc <sbrk_aligned+0x34>
 8000aa6:	1cc4      	adds	r4, r0, #3
 8000aa8:	f024 0403 	bic.w	r4, r4, #3
 8000aac:	42a0      	cmp	r0, r4
 8000aae:	d007      	beq.n	8000ac0 <sbrk_aligned+0x38>
 8000ab0:	1a21      	subs	r1, r4, r0
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f000 fb6a 	bl	800118c <_sbrk_r>
 8000ab8:	3001      	adds	r0, #1
 8000aba:	d101      	bne.n	8000ac0 <sbrk_aligned+0x38>
 8000abc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <_malloc_r>:
 8000ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000acc:	1ccd      	adds	r5, r1, #3
 8000ace:	f025 0503 	bic.w	r5, r5, #3
 8000ad2:	3508      	adds	r5, #8
 8000ad4:	2d0c      	cmp	r5, #12
 8000ad6:	bf38      	it	cc
 8000ad8:	250c      	movcc	r5, #12
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	4607      	mov	r7, r0
 8000ade:	db01      	blt.n	8000ae4 <_malloc_r+0x1c>
 8000ae0:	42a9      	cmp	r1, r5
 8000ae2:	d905      	bls.n	8000af0 <_malloc_r+0x28>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	2600      	movs	r6, #0
 8000aea:	4630      	mov	r0, r6
 8000aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000af0:	4e2e      	ldr	r6, [pc, #184]	; (8000bac <_malloc_r+0xe4>)
 8000af2:	f000 fdbb 	bl	800166c <__malloc_lock>
 8000af6:	6833      	ldr	r3, [r6, #0]
 8000af8:	461c      	mov	r4, r3
 8000afa:	bb34      	cbnz	r4, 8000b4a <_malloc_r+0x82>
 8000afc:	4629      	mov	r1, r5
 8000afe:	4638      	mov	r0, r7
 8000b00:	f7ff ffc2 	bl	8000a88 <sbrk_aligned>
 8000b04:	1c43      	adds	r3, r0, #1
 8000b06:	4604      	mov	r4, r0
 8000b08:	d14d      	bne.n	8000ba6 <_malloc_r+0xde>
 8000b0a:	6834      	ldr	r4, [r6, #0]
 8000b0c:	4626      	mov	r6, r4
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d140      	bne.n	8000b94 <_malloc_r+0xcc>
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	4631      	mov	r1, r6
 8000b16:	4638      	mov	r0, r7
 8000b18:	eb04 0803 	add.w	r8, r4, r3
 8000b1c:	f000 fb36 	bl	800118c <_sbrk_r>
 8000b20:	4580      	cmp	r8, r0
 8000b22:	d13a      	bne.n	8000b9a <_malloc_r+0xd2>
 8000b24:	6821      	ldr	r1, [r4, #0]
 8000b26:	3503      	adds	r5, #3
 8000b28:	1a6d      	subs	r5, r5, r1
 8000b2a:	f025 0503 	bic.w	r5, r5, #3
 8000b2e:	3508      	adds	r5, #8
 8000b30:	2d0c      	cmp	r5, #12
 8000b32:	bf38      	it	cc
 8000b34:	250c      	movcc	r5, #12
 8000b36:	4629      	mov	r1, r5
 8000b38:	4638      	mov	r0, r7
 8000b3a:	f7ff ffa5 	bl	8000a88 <sbrk_aligned>
 8000b3e:	3001      	adds	r0, #1
 8000b40:	d02b      	beq.n	8000b9a <_malloc_r+0xd2>
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	442b      	add	r3, r5
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	e00e      	b.n	8000b68 <_malloc_r+0xa0>
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	1b52      	subs	r2, r2, r5
 8000b4e:	d41e      	bmi.n	8000b8e <_malloc_r+0xc6>
 8000b50:	2a0b      	cmp	r2, #11
 8000b52:	d916      	bls.n	8000b82 <_malloc_r+0xba>
 8000b54:	1961      	adds	r1, r4, r5
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	6025      	str	r5, [r4, #0]
 8000b5a:	bf18      	it	ne
 8000b5c:	6059      	strne	r1, [r3, #4]
 8000b5e:	6863      	ldr	r3, [r4, #4]
 8000b60:	bf08      	it	eq
 8000b62:	6031      	streq	r1, [r6, #0]
 8000b64:	5162      	str	r2, [r4, r5]
 8000b66:	604b      	str	r3, [r1, #4]
 8000b68:	4638      	mov	r0, r7
 8000b6a:	f104 060b 	add.w	r6, r4, #11
 8000b6e:	f000 fd83 	bl	8001678 <__malloc_unlock>
 8000b72:	f026 0607 	bic.w	r6, r6, #7
 8000b76:	1d23      	adds	r3, r4, #4
 8000b78:	1af2      	subs	r2, r6, r3
 8000b7a:	d0b6      	beq.n	8000aea <_malloc_r+0x22>
 8000b7c:	1b9b      	subs	r3, r3, r6
 8000b7e:	50a3      	str	r3, [r4, r2]
 8000b80:	e7b3      	b.n	8000aea <_malloc_r+0x22>
 8000b82:	6862      	ldr	r2, [r4, #4]
 8000b84:	42a3      	cmp	r3, r4
 8000b86:	bf0c      	ite	eq
 8000b88:	6032      	streq	r2, [r6, #0]
 8000b8a:	605a      	strne	r2, [r3, #4]
 8000b8c:	e7ec      	b.n	8000b68 <_malloc_r+0xa0>
 8000b8e:	4623      	mov	r3, r4
 8000b90:	6864      	ldr	r4, [r4, #4]
 8000b92:	e7b2      	b.n	8000afa <_malloc_r+0x32>
 8000b94:	4634      	mov	r4, r6
 8000b96:	6876      	ldr	r6, [r6, #4]
 8000b98:	e7b9      	b.n	8000b0e <_malloc_r+0x46>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	f000 fd6a 	bl	8001678 <__malloc_unlock>
 8000ba4:	e7a1      	b.n	8000aea <_malloc_r+0x22>
 8000ba6:	6025      	str	r5, [r4, #0]
 8000ba8:	e7de      	b.n	8000b68 <_malloc_r+0xa0>
 8000baa:	bf00      	nop
 8000bac:	20000088 	.word	0x20000088

08000bb0 <__sfputc_r>:
 8000bb0:	6893      	ldr	r3, [r2, #8]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	b410      	push	{r4}
 8000bb8:	6093      	str	r3, [r2, #8]
 8000bba:	da08      	bge.n	8000bce <__sfputc_r+0x1e>
 8000bbc:	6994      	ldr	r4, [r2, #24]
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	db01      	blt.n	8000bc6 <__sfputc_r+0x16>
 8000bc2:	290a      	cmp	r1, #10
 8000bc4:	d103      	bne.n	8000bce <__sfputc_r+0x1e>
 8000bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bca:	f000 bb33 	b.w	8001234 <__swbuf_r>
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	1c58      	adds	r0, r3, #1
 8000bd2:	6010      	str	r0, [r2, #0]
 8000bd4:	7019      	strb	r1, [r3, #0]
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <__sfputs_r>:
 8000bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be0:	4606      	mov	r6, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	4614      	mov	r4, r2
 8000be6:	18d5      	adds	r5, r2, r3
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d101      	bne.n	8000bf0 <__sfputs_r+0x12>
 8000bec:	2000      	movs	r0, #0
 8000bee:	e007      	b.n	8000c00 <__sfputs_r+0x22>
 8000bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf4:	463a      	mov	r2, r7
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff ffda 	bl	8000bb0 <__sfputc_r>
 8000bfc:	1c43      	adds	r3, r0, #1
 8000bfe:	d1f3      	bne.n	8000be8 <__sfputs_r+0xa>
 8000c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c04 <_vfiprintf_r>:
 8000c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c08:	460d      	mov	r5, r1
 8000c0a:	b09d      	sub	sp, #116	; 0x74
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	4698      	mov	r8, r3
 8000c10:	4606      	mov	r6, r0
 8000c12:	b118      	cbz	r0, 8000c1c <_vfiprintf_r+0x18>
 8000c14:	6983      	ldr	r3, [r0, #24]
 8000c16:	b90b      	cbnz	r3, 8000c1c <_vfiprintf_r+0x18>
 8000c18:	f7ff fe96 	bl	8000948 <__sinit>
 8000c1c:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <_vfiprintf_r+0x240>)
 8000c1e:	429d      	cmp	r5, r3
 8000c20:	d11b      	bne.n	8000c5a <_vfiprintf_r+0x56>
 8000c22:	6875      	ldr	r5, [r6, #4]
 8000c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c26:	07d9      	lsls	r1, r3, #31
 8000c28:	d405      	bmi.n	8000c36 <_vfiprintf_r+0x32>
 8000c2a:	89ab      	ldrh	r3, [r5, #12]
 8000c2c:	059a      	lsls	r2, r3, #22
 8000c2e:	d402      	bmi.n	8000c36 <_vfiprintf_r+0x32>
 8000c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c32:	f7ff ff27 	bl	8000a84 <__retarget_lock_acquire_recursive>
 8000c36:	89ab      	ldrh	r3, [r5, #12]
 8000c38:	071b      	lsls	r3, r3, #28
 8000c3a:	d501      	bpl.n	8000c40 <_vfiprintf_r+0x3c>
 8000c3c:	692b      	ldr	r3, [r5, #16]
 8000c3e:	b9eb      	cbnz	r3, 8000c7c <_vfiprintf_r+0x78>
 8000c40:	4629      	mov	r1, r5
 8000c42:	4630      	mov	r0, r6
 8000c44:	f000 fb5a 	bl	80012fc <__swsetup_r>
 8000c48:	b1c0      	cbz	r0, 8000c7c <_vfiprintf_r+0x78>
 8000c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c4c:	07dc      	lsls	r4, r3, #31
 8000c4e:	d50e      	bpl.n	8000c6e <_vfiprintf_r+0x6a>
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c54:	b01d      	add	sp, #116	; 0x74
 8000c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c5a:	4b7b      	ldr	r3, [pc, #492]	; (8000e48 <_vfiprintf_r+0x244>)
 8000c5c:	429d      	cmp	r5, r3
 8000c5e:	d101      	bne.n	8000c64 <_vfiprintf_r+0x60>
 8000c60:	68b5      	ldr	r5, [r6, #8]
 8000c62:	e7df      	b.n	8000c24 <_vfiprintf_r+0x20>
 8000c64:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <_vfiprintf_r+0x248>)
 8000c66:	429d      	cmp	r5, r3
 8000c68:	bf08      	it	eq
 8000c6a:	68f5      	ldreq	r5, [r6, #12]
 8000c6c:	e7da      	b.n	8000c24 <_vfiprintf_r+0x20>
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	0598      	lsls	r0, r3, #22
 8000c72:	d4ed      	bmi.n	8000c50 <_vfiprintf_r+0x4c>
 8000c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c76:	f7ff ff06 	bl	8000a86 <__retarget_lock_release_recursive>
 8000c7a:	e7e9      	b.n	8000c50 <_vfiprintf_r+0x4c>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c80:	2320      	movs	r3, #32
 8000c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c8a:	2330      	movs	r3, #48	; 0x30
 8000c8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e50 <_vfiprintf_r+0x24c>
 8000c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c94:	f04f 0901 	mov.w	r9, #1
 8000c98:	4623      	mov	r3, r4
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca0:	b10a      	cbz	r2, 8000ca6 <_vfiprintf_r+0xa2>
 8000ca2:	2a25      	cmp	r2, #37	; 0x25
 8000ca4:	d1f9      	bne.n	8000c9a <_vfiprintf_r+0x96>
 8000ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8000caa:	d00b      	beq.n	8000cc4 <_vfiprintf_r+0xc0>
 8000cac:	465b      	mov	r3, fp
 8000cae:	4622      	mov	r2, r4
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f7ff ff93 	bl	8000bde <__sfputs_r>
 8000cb8:	3001      	adds	r0, #1
 8000cba:	f000 80aa 	beq.w	8000e12 <_vfiprintf_r+0x20e>
 8000cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cc0:	445a      	add	r2, fp
 8000cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8000cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80a2 	beq.w	8000e12 <_vfiprintf_r+0x20e>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cd8:	f10a 0a01 	add.w	sl, sl, #1
 8000cdc:	9304      	str	r3, [sp, #16]
 8000cde:	9307      	str	r3, [sp, #28]
 8000ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8000ce6:	4654      	mov	r4, sl
 8000ce8:	2205      	movs	r2, #5
 8000cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cee:	4858      	ldr	r0, [pc, #352]	; (8000e50 <_vfiprintf_r+0x24c>)
 8000cf0:	f7ff fa8e 	bl	8000210 <memchr>
 8000cf4:	9a04      	ldr	r2, [sp, #16]
 8000cf6:	b9d8      	cbnz	r0, 8000d30 <_vfiprintf_r+0x12c>
 8000cf8:	06d1      	lsls	r1, r2, #27
 8000cfa:	bf44      	itt	mi
 8000cfc:	2320      	movmi	r3, #32
 8000cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d02:	0713      	lsls	r3, r2, #28
 8000d04:	bf44      	itt	mi
 8000d06:	232b      	movmi	r3, #43	; 0x2b
 8000d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d10:	2b2a      	cmp	r3, #42	; 0x2a
 8000d12:	d015      	beq.n	8000d40 <_vfiprintf_r+0x13c>
 8000d14:	9a07      	ldr	r2, [sp, #28]
 8000d16:	4654      	mov	r4, sl
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f04f 0c0a 	mov.w	ip, #10
 8000d1e:	4621      	mov	r1, r4
 8000d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d24:	3b30      	subs	r3, #48	; 0x30
 8000d26:	2b09      	cmp	r3, #9
 8000d28:	d94e      	bls.n	8000dc8 <_vfiprintf_r+0x1c4>
 8000d2a:	b1b0      	cbz	r0, 8000d5a <_vfiprintf_r+0x156>
 8000d2c:	9207      	str	r2, [sp, #28]
 8000d2e:	e014      	b.n	8000d5a <_vfiprintf_r+0x156>
 8000d30:	eba0 0308 	sub.w	r3, r0, r8
 8000d34:	fa09 f303 	lsl.w	r3, r9, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	46a2      	mov	sl, r4
 8000d3e:	e7d2      	b.n	8000ce6 <_vfiprintf_r+0xe2>
 8000d40:	9b03      	ldr	r3, [sp, #12]
 8000d42:	1d19      	adds	r1, r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	9103      	str	r1, [sp, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bfbb      	ittet	lt
 8000d4c:	425b      	neglt	r3, r3
 8000d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d52:	9307      	strge	r3, [sp, #28]
 8000d54:	9307      	strlt	r3, [sp, #28]
 8000d56:	bfb8      	it	lt
 8000d58:	9204      	strlt	r2, [sp, #16]
 8000d5a:	7823      	ldrb	r3, [r4, #0]
 8000d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d5e:	d10c      	bne.n	8000d7a <_vfiprintf_r+0x176>
 8000d60:	7863      	ldrb	r3, [r4, #1]
 8000d62:	2b2a      	cmp	r3, #42	; 0x2a
 8000d64:	d135      	bne.n	8000dd2 <_vfiprintf_r+0x1ce>
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	1d1a      	adds	r2, r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	9203      	str	r2, [sp, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfb8      	it	lt
 8000d72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d76:	3402      	adds	r4, #2
 8000d78:	9305      	str	r3, [sp, #20]
 8000d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e60 <_vfiprintf_r+0x25c>
 8000d7e:	7821      	ldrb	r1, [r4, #0]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4650      	mov	r0, sl
 8000d84:	f7ff fa44 	bl	8000210 <memchr>
 8000d88:	b140      	cbz	r0, 8000d9c <_vfiprintf_r+0x198>
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	eba0 000a 	sub.w	r0, r0, sl
 8000d90:	fa03 f000 	lsl.w	r0, r3, r0
 8000d94:	9b04      	ldr	r3, [sp, #16]
 8000d96:	4303      	orrs	r3, r0
 8000d98:	3401      	adds	r4, #1
 8000d9a:	9304      	str	r3, [sp, #16]
 8000d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <_vfiprintf_r+0x250>)
 8000da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000da6:	2206      	movs	r2, #6
 8000da8:	f7ff fa32 	bl	8000210 <memchr>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d03f      	beq.n	8000e30 <_vfiprintf_r+0x22c>
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <_vfiprintf_r+0x254>)
 8000db2:	bb1b      	cbnz	r3, 8000dfc <_vfiprintf_r+0x1f8>
 8000db4:	9b03      	ldr	r3, [sp, #12]
 8000db6:	3307      	adds	r3, #7
 8000db8:	f023 0307 	bic.w	r3, r3, #7
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dc2:	443b      	add	r3, r7
 8000dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc6:	e767      	b.n	8000c98 <_vfiprintf_r+0x94>
 8000dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dcc:	460c      	mov	r4, r1
 8000dce:	2001      	movs	r0, #1
 8000dd0:	e7a5      	b.n	8000d1e <_vfiprintf_r+0x11a>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	3401      	adds	r4, #1
 8000dd6:	9305      	str	r3, [sp, #20]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 0c0a 	mov.w	ip, #10
 8000dde:	4620      	mov	r0, r4
 8000de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000de4:	3a30      	subs	r2, #48	; 0x30
 8000de6:	2a09      	cmp	r2, #9
 8000de8:	d903      	bls.n	8000df2 <_vfiprintf_r+0x1ee>
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0c5      	beq.n	8000d7a <_vfiprintf_r+0x176>
 8000dee:	9105      	str	r1, [sp, #20]
 8000df0:	e7c3      	b.n	8000d7a <_vfiprintf_r+0x176>
 8000df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000df6:	4604      	mov	r4, r0
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e7f0      	b.n	8000dde <_vfiprintf_r+0x1da>
 8000dfc:	ab03      	add	r3, sp, #12
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	462a      	mov	r2, r5
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <_vfiprintf_r+0x258>)
 8000e04:	a904      	add	r1, sp, #16
 8000e06:	4630      	mov	r0, r6
 8000e08:	f3af 8000 	nop.w
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	1c78      	adds	r0, r7, #1
 8000e10:	d1d6      	bne.n	8000dc0 <_vfiprintf_r+0x1bc>
 8000e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e14:	07d9      	lsls	r1, r3, #31
 8000e16:	d405      	bmi.n	8000e24 <_vfiprintf_r+0x220>
 8000e18:	89ab      	ldrh	r3, [r5, #12]
 8000e1a:	059a      	lsls	r2, r3, #22
 8000e1c:	d402      	bmi.n	8000e24 <_vfiprintf_r+0x220>
 8000e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e20:	f7ff fe31 	bl	8000a86 <__retarget_lock_release_recursive>
 8000e24:	89ab      	ldrh	r3, [r5, #12]
 8000e26:	065b      	lsls	r3, r3, #25
 8000e28:	f53f af12 	bmi.w	8000c50 <_vfiprintf_r+0x4c>
 8000e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e2e:	e711      	b.n	8000c54 <_vfiprintf_r+0x50>
 8000e30:	ab03      	add	r3, sp, #12
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	462a      	mov	r2, r5
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <_vfiprintf_r+0x258>)
 8000e38:	a904      	add	r1, sp, #16
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f000 f880 	bl	8000f40 <_printf_i>
 8000e40:	e7e4      	b.n	8000e0c <_vfiprintf_r+0x208>
 8000e42:	bf00      	nop
 8000e44:	08001828 	.word	0x08001828
 8000e48:	08001848 	.word	0x08001848
 8000e4c:	08001808 	.word	0x08001808
 8000e50:	08001868 	.word	0x08001868
 8000e54:	08001872 	.word	0x08001872
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	08000bdf 	.word	0x08000bdf
 8000e60:	0800186e 	.word	0x0800186e

08000e64 <_printf_common>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4616      	mov	r6, r2
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	690b      	ldr	r3, [r1, #16]
 8000e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bfb8      	it	lt
 8000e78:	4613      	movlt	r3, r2
 8000e7a:	6033      	str	r3, [r6, #0]
 8000e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e80:	4607      	mov	r7, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b10a      	cbz	r2, 8000e8a <_printf_common+0x26>
 8000e86:	3301      	adds	r3, #1
 8000e88:	6033      	str	r3, [r6, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	bf42      	ittt	mi
 8000e90:	6833      	ldrmi	r3, [r6, #0]
 8000e92:	3302      	addmi	r3, #2
 8000e94:	6033      	strmi	r3, [r6, #0]
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f015 0506 	ands.w	r5, r5, #6
 8000e9c:	d106      	bne.n	8000eac <_printf_common+0x48>
 8000e9e:	f104 0a19 	add.w	sl, r4, #25
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dc26      	bgt.n	8000efa <_printf_common+0x96>
 8000eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	bf18      	it	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	0692      	lsls	r2, r2, #26
 8000eba:	d42b      	bmi.n	8000f14 <_printf_common+0xb0>
 8000ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c0      	blx	r8
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d01e      	beq.n	8000f08 <_printf_common+0xa4>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	68e5      	ldr	r5, [r4, #12]
 8000ece:	6832      	ldr	r2, [r6, #0]
 8000ed0:	f003 0306 	and.w	r3, r3, #6
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	bf08      	it	eq
 8000ed8:	1aad      	subeq	r5, r5, r2
 8000eda:	68a3      	ldr	r3, [r4, #8]
 8000edc:	6922      	ldr	r2, [r4, #16]
 8000ede:	bf0c      	ite	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	2500      	movne	r5, #0
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfc4      	itt	gt
 8000eea:	1a9b      	subgt	r3, r3, r2
 8000eec:	18ed      	addgt	r5, r5, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	341a      	adds	r4, #26
 8000ef2:	42b5      	cmp	r5, r6
 8000ef4:	d11a      	bne.n	8000f2c <_printf_common+0xc8>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e008      	b.n	8000f0c <_printf_common+0xa8>
 8000efa:	2301      	movs	r3, #1
 8000efc:	4652      	mov	r2, sl
 8000efe:	4649      	mov	r1, r9
 8000f00:	4638      	mov	r0, r7
 8000f02:	47c0      	blx	r8
 8000f04:	3001      	adds	r0, #1
 8000f06:	d103      	bne.n	8000f10 <_printf_common+0xac>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7c6      	b.n	8000ea2 <_printf_common+0x3e>
 8000f14:	18e1      	adds	r1, r4, r3
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	2030      	movs	r0, #48	; 0x30
 8000f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f1e:	4422      	add	r2, r4
 8000f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f28:	3302      	adds	r3, #2
 8000f2a:	e7c7      	b.n	8000ebc <_printf_common+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4649      	mov	r1, r9
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c0      	blx	r8
 8000f36:	3001      	adds	r0, #1
 8000f38:	d0e6      	beq.n	8000f08 <_printf_common+0xa4>
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7d9      	b.n	8000ef2 <_printf_common+0x8e>
	...

08000f40 <_printf_i>:
 8000f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	7e0f      	ldrb	r7, [r1, #24]
 8000f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f48:	2f78      	cmp	r7, #120	; 0x78
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	469a      	mov	sl, r3
 8000f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f56:	d807      	bhi.n	8000f68 <_printf_i+0x28>
 8000f58:	2f62      	cmp	r7, #98	; 0x62
 8000f5a:	d80a      	bhi.n	8000f72 <_printf_i+0x32>
 8000f5c:	2f00      	cmp	r7, #0
 8000f5e:	f000 80d8 	beq.w	8001112 <_printf_i+0x1d2>
 8000f62:	2f58      	cmp	r7, #88	; 0x58
 8000f64:	f000 80a3 	beq.w	80010ae <_printf_i+0x16e>
 8000f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f70:	e03a      	b.n	8000fe8 <_printf_i+0xa8>
 8000f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f76:	2b15      	cmp	r3, #21
 8000f78:	d8f6      	bhi.n	8000f68 <_printf_i+0x28>
 8000f7a:	a101      	add	r1, pc, #4	; (adr r1, 8000f80 <_printf_i+0x40>)
 8000f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f80:	08000fd9 	.word	0x08000fd9
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000f69 	.word	0x08000f69
 8000f8c:	08000f69 	.word	0x08000f69
 8000f90:	08000f69 	.word	0x08000f69
 8000f94:	08000f69 	.word	0x08000f69
 8000f98:	08000fed 	.word	0x08000fed
 8000f9c:	08000f69 	.word	0x08000f69
 8000fa0:	08000f69 	.word	0x08000f69
 8000fa4:	08000f69 	.word	0x08000f69
 8000fa8:	08000f69 	.word	0x08000f69
 8000fac:	080010f9 	.word	0x080010f9
 8000fb0:	0800101d 	.word	0x0800101d
 8000fb4:	080010db 	.word	0x080010db
 8000fb8:	08000f69 	.word	0x08000f69
 8000fbc:	08000f69 	.word	0x08000f69
 8000fc0:	0800111b 	.word	0x0800111b
 8000fc4:	08000f69 	.word	0x08000f69
 8000fc8:	0800101d 	.word	0x0800101d
 8000fcc:	08000f69 	.word	0x08000f69
 8000fd0:	08000f69 	.word	0x08000f69
 8000fd4:	080010e3 	.word	0x080010e3
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	602a      	str	r2, [r5, #0]
 8000fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0a3      	b.n	8001134 <_printf_i+0x1f4>
 8000fec:	6820      	ldr	r0, [r4, #0]
 8000fee:	6829      	ldr	r1, [r5, #0]
 8000ff0:	0606      	lsls	r6, r0, #24
 8000ff2:	f101 0304 	add.w	r3, r1, #4
 8000ff6:	d50a      	bpl.n	800100e <_printf_i+0xce>
 8000ff8:	680e      	ldr	r6, [r1, #0]
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	da03      	bge.n	8001008 <_printf_i+0xc8>
 8001000:	232d      	movs	r3, #45	; 0x2d
 8001002:	4276      	negs	r6, r6
 8001004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001008:	485e      	ldr	r0, [pc, #376]	; (8001184 <_printf_i+0x244>)
 800100a:	230a      	movs	r3, #10
 800100c:	e019      	b.n	8001042 <_printf_i+0x102>
 800100e:	680e      	ldr	r6, [r1, #0]
 8001010:	602b      	str	r3, [r5, #0]
 8001012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001016:	bf18      	it	ne
 8001018:	b236      	sxthne	r6, r6
 800101a:	e7ef      	b.n	8000ffc <_printf_i+0xbc>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	6820      	ldr	r0, [r4, #0]
 8001020:	1d19      	adds	r1, r3, #4
 8001022:	6029      	str	r1, [r5, #0]
 8001024:	0601      	lsls	r1, r0, #24
 8001026:	d501      	bpl.n	800102c <_printf_i+0xec>
 8001028:	681e      	ldr	r6, [r3, #0]
 800102a:	e002      	b.n	8001032 <_printf_i+0xf2>
 800102c:	0646      	lsls	r6, r0, #25
 800102e:	d5fb      	bpl.n	8001028 <_printf_i+0xe8>
 8001030:	881e      	ldrh	r6, [r3, #0]
 8001032:	4854      	ldr	r0, [pc, #336]	; (8001184 <_printf_i+0x244>)
 8001034:	2f6f      	cmp	r7, #111	; 0x6f
 8001036:	bf0c      	ite	eq
 8001038:	2308      	moveq	r3, #8
 800103a:	230a      	movne	r3, #10
 800103c:	2100      	movs	r1, #0
 800103e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001042:	6865      	ldr	r5, [r4, #4]
 8001044:	60a5      	str	r5, [r4, #8]
 8001046:	2d00      	cmp	r5, #0
 8001048:	bfa2      	ittt	ge
 800104a:	6821      	ldrge	r1, [r4, #0]
 800104c:	f021 0104 	bicge.w	r1, r1, #4
 8001050:	6021      	strge	r1, [r4, #0]
 8001052:	b90e      	cbnz	r6, 8001058 <_printf_i+0x118>
 8001054:	2d00      	cmp	r5, #0
 8001056:	d04d      	beq.n	80010f4 <_printf_i+0x1b4>
 8001058:	4615      	mov	r5, r2
 800105a:	fbb6 f1f3 	udiv	r1, r6, r3
 800105e:	fb03 6711 	mls	r7, r3, r1, r6
 8001062:	5dc7      	ldrb	r7, [r0, r7]
 8001064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001068:	4637      	mov	r7, r6
 800106a:	42bb      	cmp	r3, r7
 800106c:	460e      	mov	r6, r1
 800106e:	d9f4      	bls.n	800105a <_printf_i+0x11a>
 8001070:	2b08      	cmp	r3, #8
 8001072:	d10b      	bne.n	800108c <_printf_i+0x14c>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	07de      	lsls	r6, r3, #31
 8001078:	d508      	bpl.n	800108c <_printf_i+0x14c>
 800107a:	6923      	ldr	r3, [r4, #16]
 800107c:	6861      	ldr	r1, [r4, #4]
 800107e:	4299      	cmp	r1, r3
 8001080:	bfde      	ittt	le
 8001082:	2330      	movle	r3, #48	; 0x30
 8001084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001088:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800108c:	1b52      	subs	r2, r2, r5
 800108e:	6122      	str	r2, [r4, #16]
 8001090:	f8cd a000 	str.w	sl, [sp]
 8001094:	464b      	mov	r3, r9
 8001096:	aa03      	add	r2, sp, #12
 8001098:	4621      	mov	r1, r4
 800109a:	4640      	mov	r0, r8
 800109c:	f7ff fee2 	bl	8000e64 <_printf_common>
 80010a0:	3001      	adds	r0, #1
 80010a2:	d14c      	bne.n	800113e <_printf_i+0x1fe>
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	b004      	add	sp, #16
 80010aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ae:	4835      	ldr	r0, [pc, #212]	; (8001184 <_printf_i+0x244>)
 80010b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80010b4:	6829      	ldr	r1, [r5, #0]
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80010bc:	6029      	str	r1, [r5, #0]
 80010be:	061d      	lsls	r5, r3, #24
 80010c0:	d514      	bpl.n	80010ec <_printf_i+0x1ac>
 80010c2:	07df      	lsls	r7, r3, #31
 80010c4:	bf44      	itt	mi
 80010c6:	f043 0320 	orrmi.w	r3, r3, #32
 80010ca:	6023      	strmi	r3, [r4, #0]
 80010cc:	b91e      	cbnz	r6, 80010d6 <_printf_i+0x196>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	f023 0320 	bic.w	r3, r3, #32
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	2310      	movs	r3, #16
 80010d8:	e7b0      	b.n	800103c <_printf_i+0xfc>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	2378      	movs	r3, #120	; 0x78
 80010e4:	4828      	ldr	r0, [pc, #160]	; (8001188 <_printf_i+0x248>)
 80010e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010ea:	e7e3      	b.n	80010b4 <_printf_i+0x174>
 80010ec:	0659      	lsls	r1, r3, #25
 80010ee:	bf48      	it	mi
 80010f0:	b2b6      	uxthmi	r6, r6
 80010f2:	e7e6      	b.n	80010c2 <_printf_i+0x182>
 80010f4:	4615      	mov	r5, r2
 80010f6:	e7bb      	b.n	8001070 <_printf_i+0x130>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	6826      	ldr	r6, [r4, #0]
 80010fc:	6961      	ldr	r1, [r4, #20]
 80010fe:	1d18      	adds	r0, r3, #4
 8001100:	6028      	str	r0, [r5, #0]
 8001102:	0635      	lsls	r5, r6, #24
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	d501      	bpl.n	800110c <_printf_i+0x1cc>
 8001108:	6019      	str	r1, [r3, #0]
 800110a:	e002      	b.n	8001112 <_printf_i+0x1d2>
 800110c:	0670      	lsls	r0, r6, #25
 800110e:	d5fb      	bpl.n	8001108 <_printf_i+0x1c8>
 8001110:	8019      	strh	r1, [r3, #0]
 8001112:	2300      	movs	r3, #0
 8001114:	6123      	str	r3, [r4, #16]
 8001116:	4615      	mov	r5, r2
 8001118:	e7ba      	b.n	8001090 <_printf_i+0x150>
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	602a      	str	r2, [r5, #0]
 8001120:	681d      	ldr	r5, [r3, #0]
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	2100      	movs	r1, #0
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff f872 	bl	8000210 <memchr>
 800112c:	b108      	cbz	r0, 8001132 <_printf_i+0x1f2>
 800112e:	1b40      	subs	r0, r0, r5
 8001130:	6060      	str	r0, [r4, #4]
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	6123      	str	r3, [r4, #16]
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800113c:	e7a8      	b.n	8001090 <_printf_i+0x150>
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	462a      	mov	r2, r5
 8001142:	4649      	mov	r1, r9
 8001144:	4640      	mov	r0, r8
 8001146:	47d0      	blx	sl
 8001148:	3001      	adds	r0, #1
 800114a:	d0ab      	beq.n	80010a4 <_printf_i+0x164>
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	079b      	lsls	r3, r3, #30
 8001150:	d413      	bmi.n	800117a <_printf_i+0x23a>
 8001152:	68e0      	ldr	r0, [r4, #12]
 8001154:	9b03      	ldr	r3, [sp, #12]
 8001156:	4298      	cmp	r0, r3
 8001158:	bfb8      	it	lt
 800115a:	4618      	movlt	r0, r3
 800115c:	e7a4      	b.n	80010a8 <_printf_i+0x168>
 800115e:	2301      	movs	r3, #1
 8001160:	4632      	mov	r2, r6
 8001162:	4649      	mov	r1, r9
 8001164:	4640      	mov	r0, r8
 8001166:	47d0      	blx	sl
 8001168:	3001      	adds	r0, #1
 800116a:	d09b      	beq.n	80010a4 <_printf_i+0x164>
 800116c:	3501      	adds	r5, #1
 800116e:	68e3      	ldr	r3, [r4, #12]
 8001170:	9903      	ldr	r1, [sp, #12]
 8001172:	1a5b      	subs	r3, r3, r1
 8001174:	42ab      	cmp	r3, r5
 8001176:	dcf2      	bgt.n	800115e <_printf_i+0x21e>
 8001178:	e7eb      	b.n	8001152 <_printf_i+0x212>
 800117a:	2500      	movs	r5, #0
 800117c:	f104 0619 	add.w	r6, r4, #25
 8001180:	e7f5      	b.n	800116e <_printf_i+0x22e>
 8001182:	bf00      	nop
 8001184:	08001879 	.word	0x08001879
 8001188:	0800188a 	.word	0x0800188a

0800118c <_sbrk_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4d06      	ldr	r5, [pc, #24]	; (80011a8 <_sbrk_r+0x1c>)
 8001190:	2300      	movs	r3, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	602b      	str	r3, [r5, #0]
 8001198:	f7ff fa26 	bl	80005e8 <_sbrk>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_sbrk_r+0x1a>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_sbrk_r+0x1a>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	20000090 	.word	0x20000090

080011ac <__sread>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	460c      	mov	r4, r1
 80011b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b4:	f000 fab2 	bl	800171c <_read_r>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	bfab      	itete	ge
 80011bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011be:	89a3      	ldrhlt	r3, [r4, #12]
 80011c0:	181b      	addge	r3, r3, r0
 80011c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011c6:	bfac      	ite	ge
 80011c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80011ca:	81a3      	strhlt	r3, [r4, #12]
 80011cc:	bd10      	pop	{r4, pc}

080011ce <__swrite>:
 80011ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d2:	461f      	mov	r7, r3
 80011d4:	898b      	ldrh	r3, [r1, #12]
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	4605      	mov	r5, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4616      	mov	r6, r2
 80011de:	d505      	bpl.n	80011ec <__swrite+0x1e>
 80011e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2200      	movs	r2, #0
 80011e8:	f000 f9c8 	bl	800157c <_lseek_r>
 80011ec:	89a3      	ldrh	r3, [r4, #12]
 80011ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011f6:	81a3      	strh	r3, [r4, #12]
 80011f8:	4632      	mov	r2, r6
 80011fa:	463b      	mov	r3, r7
 80011fc:	4628      	mov	r0, r5
 80011fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001202:	f000 b869 	b.w	80012d8 <_write_r>

08001206 <__sseek>:
 8001206:	b510      	push	{r4, lr}
 8001208:	460c      	mov	r4, r1
 800120a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800120e:	f000 f9b5 	bl	800157c <_lseek_r>
 8001212:	1c43      	adds	r3, r0, #1
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	bf15      	itete	ne
 8001218:	6560      	strne	r0, [r4, #84]	; 0x54
 800121a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800121e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001222:	81a3      	strheq	r3, [r4, #12]
 8001224:	bf18      	it	ne
 8001226:	81a3      	strhne	r3, [r4, #12]
 8001228:	bd10      	pop	{r4, pc}

0800122a <__sclose>:
 800122a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800122e:	f000 b8d3 	b.w	80013d8 <_close_r>
	...

08001234 <__swbuf_r>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	460e      	mov	r6, r1
 8001238:	4614      	mov	r4, r2
 800123a:	4605      	mov	r5, r0
 800123c:	b118      	cbz	r0, 8001246 <__swbuf_r+0x12>
 800123e:	6983      	ldr	r3, [r0, #24]
 8001240:	b90b      	cbnz	r3, 8001246 <__swbuf_r+0x12>
 8001242:	f7ff fb81 	bl	8000948 <__sinit>
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <__swbuf_r+0x98>)
 8001248:	429c      	cmp	r4, r3
 800124a:	d12b      	bne.n	80012a4 <__swbuf_r+0x70>
 800124c:	686c      	ldr	r4, [r5, #4]
 800124e:	69a3      	ldr	r3, [r4, #24]
 8001250:	60a3      	str	r3, [r4, #8]
 8001252:	89a3      	ldrh	r3, [r4, #12]
 8001254:	071a      	lsls	r2, r3, #28
 8001256:	d52f      	bpl.n	80012b8 <__swbuf_r+0x84>
 8001258:	6923      	ldr	r3, [r4, #16]
 800125a:	b36b      	cbz	r3, 80012b8 <__swbuf_r+0x84>
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	1ac0      	subs	r0, r0, r3
 8001262:	6963      	ldr	r3, [r4, #20]
 8001264:	b2f6      	uxtb	r6, r6
 8001266:	4283      	cmp	r3, r0
 8001268:	4637      	mov	r7, r6
 800126a:	dc04      	bgt.n	8001276 <__swbuf_r+0x42>
 800126c:	4621      	mov	r1, r4
 800126e:	4628      	mov	r0, r5
 8001270:	f000 f948 	bl	8001504 <_fflush_r>
 8001274:	bb30      	cbnz	r0, 80012c4 <__swbuf_r+0x90>
 8001276:	68a3      	ldr	r3, [r4, #8]
 8001278:	3b01      	subs	r3, #1
 800127a:	60a3      	str	r3, [r4, #8]
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	6022      	str	r2, [r4, #0]
 8001282:	701e      	strb	r6, [r3, #0]
 8001284:	6963      	ldr	r3, [r4, #20]
 8001286:	3001      	adds	r0, #1
 8001288:	4283      	cmp	r3, r0
 800128a:	d004      	beq.n	8001296 <__swbuf_r+0x62>
 800128c:	89a3      	ldrh	r3, [r4, #12]
 800128e:	07db      	lsls	r3, r3, #31
 8001290:	d506      	bpl.n	80012a0 <__swbuf_r+0x6c>
 8001292:	2e0a      	cmp	r6, #10
 8001294:	d104      	bne.n	80012a0 <__swbuf_r+0x6c>
 8001296:	4621      	mov	r1, r4
 8001298:	4628      	mov	r0, r5
 800129a:	f000 f933 	bl	8001504 <_fflush_r>
 800129e:	b988      	cbnz	r0, 80012c4 <__swbuf_r+0x90>
 80012a0:	4638      	mov	r0, r7
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <__swbuf_r+0x9c>)
 80012a6:	429c      	cmp	r4, r3
 80012a8:	d101      	bne.n	80012ae <__swbuf_r+0x7a>
 80012aa:	68ac      	ldr	r4, [r5, #8]
 80012ac:	e7cf      	b.n	800124e <__swbuf_r+0x1a>
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <__swbuf_r+0xa0>)
 80012b0:	429c      	cmp	r4, r3
 80012b2:	bf08      	it	eq
 80012b4:	68ec      	ldreq	r4, [r5, #12]
 80012b6:	e7ca      	b.n	800124e <__swbuf_r+0x1a>
 80012b8:	4621      	mov	r1, r4
 80012ba:	4628      	mov	r0, r5
 80012bc:	f000 f81e 	bl	80012fc <__swsetup_r>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d0cb      	beq.n	800125c <__swbuf_r+0x28>
 80012c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80012c8:	e7ea      	b.n	80012a0 <__swbuf_r+0x6c>
 80012ca:	bf00      	nop
 80012cc:	08001828 	.word	0x08001828
 80012d0:	08001848 	.word	0x08001848
 80012d4:	08001808 	.word	0x08001808

080012d8 <_write_r>:
 80012d8:	b538      	push	{r3, r4, r5, lr}
 80012da:	4d07      	ldr	r5, [pc, #28]	; (80012f8 <_write_r+0x20>)
 80012dc:	4604      	mov	r4, r0
 80012de:	4608      	mov	r0, r1
 80012e0:	4611      	mov	r1, r2
 80012e2:	2200      	movs	r2, #0
 80012e4:	602a      	str	r2, [r5, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f7ff f92d 	bl	8000546 <_write>
 80012ec:	1c43      	adds	r3, r0, #1
 80012ee:	d102      	bne.n	80012f6 <_write_r+0x1e>
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	b103      	cbz	r3, 80012f6 <_write_r+0x1e>
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	20000090 	.word	0x20000090

080012fc <__swsetup_r>:
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <__swsetup_r+0xcc>)
 80012fe:	b570      	push	{r4, r5, r6, lr}
 8001300:	681d      	ldr	r5, [r3, #0]
 8001302:	4606      	mov	r6, r0
 8001304:	460c      	mov	r4, r1
 8001306:	b125      	cbz	r5, 8001312 <__swsetup_r+0x16>
 8001308:	69ab      	ldr	r3, [r5, #24]
 800130a:	b913      	cbnz	r3, 8001312 <__swsetup_r+0x16>
 800130c:	4628      	mov	r0, r5
 800130e:	f7ff fb1b 	bl	8000948 <__sinit>
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <__swsetup_r+0xd0>)
 8001314:	429c      	cmp	r4, r3
 8001316:	d10f      	bne.n	8001338 <__swsetup_r+0x3c>
 8001318:	686c      	ldr	r4, [r5, #4]
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001320:	0719      	lsls	r1, r3, #28
 8001322:	d42c      	bmi.n	800137e <__swsetup_r+0x82>
 8001324:	06dd      	lsls	r5, r3, #27
 8001326:	d411      	bmi.n	800134c <__swsetup_r+0x50>
 8001328:	2309      	movs	r3, #9
 800132a:	6033      	str	r3, [r6, #0]
 800132c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001336:	e03e      	b.n	80013b6 <__swsetup_r+0xba>
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <__swsetup_r+0xd4>)
 800133a:	429c      	cmp	r4, r3
 800133c:	d101      	bne.n	8001342 <__swsetup_r+0x46>
 800133e:	68ac      	ldr	r4, [r5, #8]
 8001340:	e7eb      	b.n	800131a <__swsetup_r+0x1e>
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <__swsetup_r+0xd8>)
 8001344:	429c      	cmp	r4, r3
 8001346:	bf08      	it	eq
 8001348:	68ec      	ldreq	r4, [r5, #12]
 800134a:	e7e6      	b.n	800131a <__swsetup_r+0x1e>
 800134c:	0758      	lsls	r0, r3, #29
 800134e:	d512      	bpl.n	8001376 <__swsetup_r+0x7a>
 8001350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001352:	b141      	cbz	r1, 8001366 <__swsetup_r+0x6a>
 8001354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001358:	4299      	cmp	r1, r3
 800135a:	d002      	beq.n	8001362 <__swsetup_r+0x66>
 800135c:	4630      	mov	r0, r6
 800135e:	f000 f991 	bl	8001684 <_free_r>
 8001362:	2300      	movs	r3, #0
 8001364:	6363      	str	r3, [r4, #52]	; 0x34
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	2300      	movs	r3, #0
 8001370:	6063      	str	r3, [r4, #4]
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	b94b      	cbnz	r3, 8001396 <__swsetup_r+0x9a>
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138c:	d003      	beq.n	8001396 <__swsetup_r+0x9a>
 800138e:	4621      	mov	r1, r4
 8001390:	4630      	mov	r0, r6
 8001392:	f000 f92b 	bl	80015ec <__smakebuf_r>
 8001396:	89a0      	ldrh	r0, [r4, #12]
 8001398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800139c:	f010 0301 	ands.w	r3, r0, #1
 80013a0:	d00a      	beq.n	80013b8 <__swsetup_r+0xbc>
 80013a2:	2300      	movs	r3, #0
 80013a4:	60a3      	str	r3, [r4, #8]
 80013a6:	6963      	ldr	r3, [r4, #20]
 80013a8:	425b      	negs	r3, r3
 80013aa:	61a3      	str	r3, [r4, #24]
 80013ac:	6923      	ldr	r3, [r4, #16]
 80013ae:	b943      	cbnz	r3, 80013c2 <__swsetup_r+0xc6>
 80013b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013b4:	d1ba      	bne.n	800132c <__swsetup_r+0x30>
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	0781      	lsls	r1, r0, #30
 80013ba:	bf58      	it	pl
 80013bc:	6963      	ldrpl	r3, [r4, #20]
 80013be:	60a3      	str	r3, [r4, #8]
 80013c0:	e7f4      	b.n	80013ac <__swsetup_r+0xb0>
 80013c2:	2000      	movs	r0, #0
 80013c4:	e7f7      	b.n	80013b6 <__swsetup_r+0xba>
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	08001828 	.word	0x08001828
 80013d0:	08001848 	.word	0x08001848
 80013d4:	08001808 	.word	0x08001808

080013d8 <_close_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	4d06      	ldr	r5, [pc, #24]	; (80013f4 <_close_r+0x1c>)
 80013dc:	2300      	movs	r3, #0
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	602b      	str	r3, [r5, #0]
 80013e4:	f7ff f8cb 	bl	800057e <_close>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_close_r+0x1a>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_close_r+0x1a>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	20000090 	.word	0x20000090

080013f8 <__sflush_r>:
 80013f8:	898a      	ldrh	r2, [r1, #12]
 80013fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fe:	4605      	mov	r5, r0
 8001400:	0710      	lsls	r0, r2, #28
 8001402:	460c      	mov	r4, r1
 8001404:	d458      	bmi.n	80014b8 <__sflush_r+0xc0>
 8001406:	684b      	ldr	r3, [r1, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc05      	bgt.n	8001418 <__sflush_r+0x20>
 800140c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	dc02      	bgt.n	8001418 <__sflush_r+0x20>
 8001412:	2000      	movs	r0, #0
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800141a:	2e00      	cmp	r6, #0
 800141c:	d0f9      	beq.n	8001412 <__sflush_r+0x1a>
 800141e:	2300      	movs	r3, #0
 8001420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001424:	682f      	ldr	r7, [r5, #0]
 8001426:	602b      	str	r3, [r5, #0]
 8001428:	d032      	beq.n	8001490 <__sflush_r+0x98>
 800142a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800142c:	89a3      	ldrh	r3, [r4, #12]
 800142e:	075a      	lsls	r2, r3, #29
 8001430:	d505      	bpl.n	800143e <__sflush_r+0x46>
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	1ac0      	subs	r0, r0, r3
 8001436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001438:	b10b      	cbz	r3, 800143e <__sflush_r+0x46>
 800143a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800143c:	1ac0      	subs	r0, r0, r3
 800143e:	2300      	movs	r3, #0
 8001440:	4602      	mov	r2, r0
 8001442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001444:	6a21      	ldr	r1, [r4, #32]
 8001446:	4628      	mov	r0, r5
 8001448:	47b0      	blx	r6
 800144a:	1c43      	adds	r3, r0, #1
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	d106      	bne.n	800145e <__sflush_r+0x66>
 8001450:	6829      	ldr	r1, [r5, #0]
 8001452:	291d      	cmp	r1, #29
 8001454:	d82c      	bhi.n	80014b0 <__sflush_r+0xb8>
 8001456:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <__sflush_r+0x108>)
 8001458:	40ca      	lsrs	r2, r1
 800145a:	07d6      	lsls	r6, r2, #31
 800145c:	d528      	bpl.n	80014b0 <__sflush_r+0xb8>
 800145e:	2200      	movs	r2, #0
 8001460:	6062      	str	r2, [r4, #4]
 8001462:	04d9      	lsls	r1, r3, #19
 8001464:	6922      	ldr	r2, [r4, #16]
 8001466:	6022      	str	r2, [r4, #0]
 8001468:	d504      	bpl.n	8001474 <__sflush_r+0x7c>
 800146a:	1c42      	adds	r2, r0, #1
 800146c:	d101      	bne.n	8001472 <__sflush_r+0x7a>
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	b903      	cbnz	r3, 8001474 <__sflush_r+0x7c>
 8001472:	6560      	str	r0, [r4, #84]	; 0x54
 8001474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001476:	602f      	str	r7, [r5, #0]
 8001478:	2900      	cmp	r1, #0
 800147a:	d0ca      	beq.n	8001412 <__sflush_r+0x1a>
 800147c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001480:	4299      	cmp	r1, r3
 8001482:	d002      	beq.n	800148a <__sflush_r+0x92>
 8001484:	4628      	mov	r0, r5
 8001486:	f000 f8fd 	bl	8001684 <_free_r>
 800148a:	2000      	movs	r0, #0
 800148c:	6360      	str	r0, [r4, #52]	; 0x34
 800148e:	e7c1      	b.n	8001414 <__sflush_r+0x1c>
 8001490:	6a21      	ldr	r1, [r4, #32]
 8001492:	2301      	movs	r3, #1
 8001494:	4628      	mov	r0, r5
 8001496:	47b0      	blx	r6
 8001498:	1c41      	adds	r1, r0, #1
 800149a:	d1c7      	bne.n	800142c <__sflush_r+0x34>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0c4      	beq.n	800142c <__sflush_r+0x34>
 80014a2:	2b1d      	cmp	r3, #29
 80014a4:	d001      	beq.n	80014aa <__sflush_r+0xb2>
 80014a6:	2b16      	cmp	r3, #22
 80014a8:	d101      	bne.n	80014ae <__sflush_r+0xb6>
 80014aa:	602f      	str	r7, [r5, #0]
 80014ac:	e7b1      	b.n	8001412 <__sflush_r+0x1a>
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b4:	81a3      	strh	r3, [r4, #12]
 80014b6:	e7ad      	b.n	8001414 <__sflush_r+0x1c>
 80014b8:	690f      	ldr	r7, [r1, #16]
 80014ba:	2f00      	cmp	r7, #0
 80014bc:	d0a9      	beq.n	8001412 <__sflush_r+0x1a>
 80014be:	0793      	lsls	r3, r2, #30
 80014c0:	680e      	ldr	r6, [r1, #0]
 80014c2:	bf08      	it	eq
 80014c4:	694b      	ldreq	r3, [r1, #20]
 80014c6:	600f      	str	r7, [r1, #0]
 80014c8:	bf18      	it	ne
 80014ca:	2300      	movne	r3, #0
 80014cc:	eba6 0807 	sub.w	r8, r6, r7
 80014d0:	608b      	str	r3, [r1, #8]
 80014d2:	f1b8 0f00 	cmp.w	r8, #0
 80014d6:	dd9c      	ble.n	8001412 <__sflush_r+0x1a>
 80014d8:	6a21      	ldr	r1, [r4, #32]
 80014da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014dc:	4643      	mov	r3, r8
 80014de:	463a      	mov	r2, r7
 80014e0:	4628      	mov	r0, r5
 80014e2:	47b0      	blx	r6
 80014e4:	2800      	cmp	r0, #0
 80014e6:	dc06      	bgt.n	80014f6 <__sflush_r+0xfe>
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ee:	81a3      	strh	r3, [r4, #12]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	e78e      	b.n	8001414 <__sflush_r+0x1c>
 80014f6:	4407      	add	r7, r0
 80014f8:	eba8 0800 	sub.w	r8, r8, r0
 80014fc:	e7e9      	b.n	80014d2 <__sflush_r+0xda>
 80014fe:	bf00      	nop
 8001500:	20400001 	.word	0x20400001

08001504 <_fflush_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	690b      	ldr	r3, [r1, #16]
 8001508:	4605      	mov	r5, r0
 800150a:	460c      	mov	r4, r1
 800150c:	b913      	cbnz	r3, 8001514 <_fflush_r+0x10>
 800150e:	2500      	movs	r5, #0
 8001510:	4628      	mov	r0, r5
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	b118      	cbz	r0, 800151e <_fflush_r+0x1a>
 8001516:	6983      	ldr	r3, [r0, #24]
 8001518:	b90b      	cbnz	r3, 800151e <_fflush_r+0x1a>
 800151a:	f7ff fa15 	bl	8000948 <__sinit>
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <_fflush_r+0x6c>)
 8001520:	429c      	cmp	r4, r3
 8001522:	d11b      	bne.n	800155c <_fflush_r+0x58>
 8001524:	686c      	ldr	r4, [r5, #4]
 8001526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ef      	beq.n	800150e <_fflush_r+0xa>
 800152e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001530:	07d0      	lsls	r0, r2, #31
 8001532:	d404      	bmi.n	800153e <_fflush_r+0x3a>
 8001534:	0599      	lsls	r1, r3, #22
 8001536:	d402      	bmi.n	800153e <_fflush_r+0x3a>
 8001538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800153a:	f7ff faa3 	bl	8000a84 <__retarget_lock_acquire_recursive>
 800153e:	4628      	mov	r0, r5
 8001540:	4621      	mov	r1, r4
 8001542:	f7ff ff59 	bl	80013f8 <__sflush_r>
 8001546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001548:	07da      	lsls	r2, r3, #31
 800154a:	4605      	mov	r5, r0
 800154c:	d4e0      	bmi.n	8001510 <_fflush_r+0xc>
 800154e:	89a3      	ldrh	r3, [r4, #12]
 8001550:	059b      	lsls	r3, r3, #22
 8001552:	d4dd      	bmi.n	8001510 <_fflush_r+0xc>
 8001554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001556:	f7ff fa96 	bl	8000a86 <__retarget_lock_release_recursive>
 800155a:	e7d9      	b.n	8001510 <_fflush_r+0xc>
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <_fflush_r+0x70>)
 800155e:	429c      	cmp	r4, r3
 8001560:	d101      	bne.n	8001566 <_fflush_r+0x62>
 8001562:	68ac      	ldr	r4, [r5, #8]
 8001564:	e7df      	b.n	8001526 <_fflush_r+0x22>
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <_fflush_r+0x74>)
 8001568:	429c      	cmp	r4, r3
 800156a:	bf08      	it	eq
 800156c:	68ec      	ldreq	r4, [r5, #12]
 800156e:	e7da      	b.n	8001526 <_fflush_r+0x22>
 8001570:	08001828 	.word	0x08001828
 8001574:	08001848 	.word	0x08001848
 8001578:	08001808 	.word	0x08001808

0800157c <_lseek_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d07      	ldr	r5, [pc, #28]	; (800159c <_lseek_r+0x20>)
 8001580:	4604      	mov	r4, r0
 8001582:	4608      	mov	r0, r1
 8001584:	4611      	mov	r1, r2
 8001586:	2200      	movs	r2, #0
 8001588:	602a      	str	r2, [r5, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff f81e 	bl	80005cc <_lseek>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	d102      	bne.n	800159a <_lseek_r+0x1e>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	b103      	cbz	r3, 800159a <_lseek_r+0x1e>
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	bd38      	pop	{r3, r4, r5, pc}
 800159c:	20000090 	.word	0x20000090

080015a0 <__swhatbuf_r>:
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	460e      	mov	r6, r1
 80015a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a8:	2900      	cmp	r1, #0
 80015aa:	b096      	sub	sp, #88	; 0x58
 80015ac:	4614      	mov	r4, r2
 80015ae:	461d      	mov	r5, r3
 80015b0:	da08      	bge.n	80015c4 <__swhatbuf_r+0x24>
 80015b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	602a      	str	r2, [r5, #0]
 80015ba:	061a      	lsls	r2, r3, #24
 80015bc:	d410      	bmi.n	80015e0 <__swhatbuf_r+0x40>
 80015be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c2:	e00e      	b.n	80015e2 <__swhatbuf_r+0x42>
 80015c4:	466a      	mov	r2, sp
 80015c6:	f000 f8bb 	bl	8001740 <_fstat_r>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	dbf1      	blt.n	80015b2 <__swhatbuf_r+0x12>
 80015ce:	9a01      	ldr	r2, [sp, #4]
 80015d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015d8:	425a      	negs	r2, r3
 80015da:	415a      	adcs	r2, r3
 80015dc:	602a      	str	r2, [r5, #0]
 80015de:	e7ee      	b.n	80015be <__swhatbuf_r+0x1e>
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	2000      	movs	r0, #0
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	b016      	add	sp, #88	; 0x58
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080015ec <__smakebuf_r>:
 80015ec:	898b      	ldrh	r3, [r1, #12]
 80015ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015f0:	079d      	lsls	r5, r3, #30
 80015f2:	4606      	mov	r6, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	d507      	bpl.n	8001608 <__smakebuf_r+0x1c>
 80015f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	6123      	str	r3, [r4, #16]
 8001600:	2301      	movs	r3, #1
 8001602:	6163      	str	r3, [r4, #20]
 8001604:	b002      	add	sp, #8
 8001606:	bd70      	pop	{r4, r5, r6, pc}
 8001608:	ab01      	add	r3, sp, #4
 800160a:	466a      	mov	r2, sp
 800160c:	f7ff ffc8 	bl	80015a0 <__swhatbuf_r>
 8001610:	9900      	ldr	r1, [sp, #0]
 8001612:	4605      	mov	r5, r0
 8001614:	4630      	mov	r0, r6
 8001616:	f7ff fa57 	bl	8000ac8 <_malloc_r>
 800161a:	b948      	cbnz	r0, 8001630 <__smakebuf_r+0x44>
 800161c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001620:	059a      	lsls	r2, r3, #22
 8001622:	d4ef      	bmi.n	8001604 <__smakebuf_r+0x18>
 8001624:	f023 0303 	bic.w	r3, r3, #3
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	81a3      	strh	r3, [r4, #12]
 800162e:	e7e3      	b.n	80015f8 <__smakebuf_r+0xc>
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <__smakebuf_r+0x7c>)
 8001632:	62b3      	str	r3, [r6, #40]	; 0x28
 8001634:	89a3      	ldrh	r3, [r4, #12]
 8001636:	6020      	str	r0, [r4, #0]
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	9b00      	ldr	r3, [sp, #0]
 8001640:	6163      	str	r3, [r4, #20]
 8001642:	9b01      	ldr	r3, [sp, #4]
 8001644:	6120      	str	r0, [r4, #16]
 8001646:	b15b      	cbz	r3, 8001660 <__smakebuf_r+0x74>
 8001648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800164c:	4630      	mov	r0, r6
 800164e:	f000 f889 	bl	8001764 <_isatty_r>
 8001652:	b128      	cbz	r0, 8001660 <__smakebuf_r+0x74>
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	89a0      	ldrh	r0, [r4, #12]
 8001662:	4305      	orrs	r5, r0
 8001664:	81a5      	strh	r5, [r4, #12]
 8001666:	e7cd      	b.n	8001604 <__smakebuf_r+0x18>
 8001668:	080008e1 	.word	0x080008e1

0800166c <__malloc_lock>:
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <__malloc_lock+0x8>)
 800166e:	f7ff ba09 	b.w	8000a84 <__retarget_lock_acquire_recursive>
 8001672:	bf00      	nop
 8001674:	20000084 	.word	0x20000084

08001678 <__malloc_unlock>:
 8001678:	4801      	ldr	r0, [pc, #4]	; (8001680 <__malloc_unlock+0x8>)
 800167a:	f7ff ba04 	b.w	8000a86 <__retarget_lock_release_recursive>
 800167e:	bf00      	nop
 8001680:	20000084 	.word	0x20000084

08001684 <_free_r>:
 8001684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001686:	2900      	cmp	r1, #0
 8001688:	d044      	beq.n	8001714 <_free_r+0x90>
 800168a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800168e:	9001      	str	r0, [sp, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f1a1 0404 	sub.w	r4, r1, #4
 8001696:	bfb8      	it	lt
 8001698:	18e4      	addlt	r4, r4, r3
 800169a:	f7ff ffe7 	bl	800166c <__malloc_lock>
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <_free_r+0x94>)
 80016a0:	9801      	ldr	r0, [sp, #4]
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	b933      	cbnz	r3, 80016b4 <_free_r+0x30>
 80016a6:	6063      	str	r3, [r4, #4]
 80016a8:	6014      	str	r4, [r2, #0]
 80016aa:	b003      	add	sp, #12
 80016ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016b0:	f7ff bfe2 	b.w	8001678 <__malloc_unlock>
 80016b4:	42a3      	cmp	r3, r4
 80016b6:	d908      	bls.n	80016ca <_free_r+0x46>
 80016b8:	6825      	ldr	r5, [r4, #0]
 80016ba:	1961      	adds	r1, r4, r5
 80016bc:	428b      	cmp	r3, r1
 80016be:	bf01      	itttt	eq
 80016c0:	6819      	ldreq	r1, [r3, #0]
 80016c2:	685b      	ldreq	r3, [r3, #4]
 80016c4:	1949      	addeq	r1, r1, r5
 80016c6:	6021      	streq	r1, [r4, #0]
 80016c8:	e7ed      	b.n	80016a6 <_free_r+0x22>
 80016ca:	461a      	mov	r2, r3
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	b10b      	cbz	r3, 80016d4 <_free_r+0x50>
 80016d0:	42a3      	cmp	r3, r4
 80016d2:	d9fa      	bls.n	80016ca <_free_r+0x46>
 80016d4:	6811      	ldr	r1, [r2, #0]
 80016d6:	1855      	adds	r5, r2, r1
 80016d8:	42a5      	cmp	r5, r4
 80016da:	d10b      	bne.n	80016f4 <_free_r+0x70>
 80016dc:	6824      	ldr	r4, [r4, #0]
 80016de:	4421      	add	r1, r4
 80016e0:	1854      	adds	r4, r2, r1
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	6011      	str	r1, [r2, #0]
 80016e6:	d1e0      	bne.n	80016aa <_free_r+0x26>
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	6053      	str	r3, [r2, #4]
 80016ee:	4421      	add	r1, r4
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	e7da      	b.n	80016aa <_free_r+0x26>
 80016f4:	d902      	bls.n	80016fc <_free_r+0x78>
 80016f6:	230c      	movs	r3, #12
 80016f8:	6003      	str	r3, [r0, #0]
 80016fa:	e7d6      	b.n	80016aa <_free_r+0x26>
 80016fc:	6825      	ldr	r5, [r4, #0]
 80016fe:	1961      	adds	r1, r4, r5
 8001700:	428b      	cmp	r3, r1
 8001702:	bf04      	itt	eq
 8001704:	6819      	ldreq	r1, [r3, #0]
 8001706:	685b      	ldreq	r3, [r3, #4]
 8001708:	6063      	str	r3, [r4, #4]
 800170a:	bf04      	itt	eq
 800170c:	1949      	addeq	r1, r1, r5
 800170e:	6021      	streq	r1, [r4, #0]
 8001710:	6054      	str	r4, [r2, #4]
 8001712:	e7ca      	b.n	80016aa <_free_r+0x26>
 8001714:	b003      	add	sp, #12
 8001716:	bd30      	pop	{r4, r5, pc}
 8001718:	20000088 	.word	0x20000088

0800171c <_read_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4d07      	ldr	r5, [pc, #28]	; (800173c <_read_r+0x20>)
 8001720:	4604      	mov	r4, r0
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	2200      	movs	r2, #0
 8001728:	602a      	str	r2, [r5, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	f7fe feee 	bl	800050c <_read>
 8001730:	1c43      	adds	r3, r0, #1
 8001732:	d102      	bne.n	800173a <_read_r+0x1e>
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	b103      	cbz	r3, 800173a <_read_r+0x1e>
 8001738:	6023      	str	r3, [r4, #0]
 800173a:	bd38      	pop	{r3, r4, r5, pc}
 800173c:	20000090 	.word	0x20000090

08001740 <_fstat_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d07      	ldr	r5, [pc, #28]	; (8001760 <_fstat_r+0x20>)
 8001744:	2300      	movs	r3, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	602b      	str	r3, [r5, #0]
 800174e:	f7fe ff22 	bl	8000596 <_fstat>
 8001752:	1c43      	adds	r3, r0, #1
 8001754:	d102      	bne.n	800175c <_fstat_r+0x1c>
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	b103      	cbz	r3, 800175c <_fstat_r+0x1c>
 800175a:	6023      	str	r3, [r4, #0]
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000090 	.word	0x20000090

08001764 <_isatty_r>:
 8001764:	b538      	push	{r3, r4, r5, lr}
 8001766:	4d06      	ldr	r5, [pc, #24]	; (8001780 <_isatty_r+0x1c>)
 8001768:	2300      	movs	r3, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	602b      	str	r3, [r5, #0]
 8001770:	f7fe ff21 	bl	80005b6 <_isatty>
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	d102      	bne.n	800177e <_isatty_r+0x1a>
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	b103      	cbz	r3, 800177e <_isatty_r+0x1a>
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	20000090 	.word	0x20000090

08001784 <_init>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	bf00      	nop
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr

08001790 <_fini>:
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001792:	bf00      	nop
 8001794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001796:	bc08      	pop	{r3}
 8001798:	469e      	mov	lr, r3
 800179a:	4770      	bx	lr
